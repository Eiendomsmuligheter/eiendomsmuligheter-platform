version: '3.8'

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "443:443"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
      - API_URL=https://api.eiendomsmuligheter.no
    volumes:
      - ./ssl:/etc/nginx/ssl
      - ./nginx/prod.conf:/etc/nginx/nginx.conf
    networks:
      - app_network
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - DATABASE_URL=postgresql://user:pass@db:5432/eiendomsmuligheter
      - REDIS_URL=redis://redis:6379/0
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_WEBHOOK_SECRET=${STRIPE_WEBHOOK_SECRET}
      - ENOVA_API_KEY=${ENOVA_API_KEY}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      - db
      - redis
    networks:
      - app_network
    deploy:
      replicas: 3
      update_config:
        parallelism: 1
        delay: 10s
      restart_policy:
        condition: on-failure
        max_attempts: 3

  db:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=pass
      - POSTGRES_DB=eiendomsmuligheter
    networks:
      - app_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3

  redis:
    image: redis:6-alpine
    volumes:
      - redis_data:/data
    networks:
      - app_network
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        max_attempts: 3

  ml_service:
    build:
      context: ./ai_modules
      dockerfile: Dockerfile.prod
    environment:
      - MODEL_PATH=/models
      - NVIDIA_VISIBLE_DEVICES=all
    volumes:
      - ./models:/models
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    networks:
      - app_network

  monitoring:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
    networks:
      - app_network
    deploy:
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - app_network
    deploy:
      placement:
        constraints:
          - node.role == manager

  backup:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/source:ro
      - backup_data:/backup
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - BACKUP_SCHEDULE="0 2 * * *"  # Hver natt kl. 02:00
    command: |
      sh -c 'while true; do
        pg_dump -h db -U user eiendomsmuligheter > /backup/dump_$(date +%Y%m%d_%H%M%S).sql
        aws s3 sync /backup s3://eiendomsmuligheter-backup
        sleep 86400
      done'
    networks:
      - app_network
    deploy:
      placement:
        constraints:
          - node.role == manager

volumes:
  postgres_data:
  redis_data:
  grafana_data:
  prometheus_data:
  backup_data:

networks:
  app_network:
    driver: overlay
    attachable: true