name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'  # Legg til caching for pip
        
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'  # Legg til caching for npm
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r ai_modules/requirements.txt
        
    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Run Python tests
      run: |
        pytest backend/tests --junitxml=junit/backend-test-results.xml
        pytest ai_modules/tests --junitxml=junit/ai-test-results.xml
        
    - name: Run Frontend tests
      run: |
        cd frontend
        npm test -- --ci --reporters=default --reporters=jest-junit
      env:
        JEST_JUNIT_OUTPUT_DIR: ../junit/
        
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: junit/
        
    - name: Run type checking
      run: |
        cd frontend
        npm run type-check
        
  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run SAST scan
      uses: github/codeql-action/analyze@v2
      with:
        languages: javascript, python
      
    - name: Run dependency scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        
    - name: Run OWASP ZAP scan
      uses: zaproxy/action-baseline@v0.7.0
      with:
        target: 'http://localhost:3000'  # Endre til din staging-URL

  build-and-push:
    needs: [test, security-scan]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Build and push Frontend
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ghcr.io/eiendomsmuligheter/frontend:latest,ghcr.io/eiendomsmuligheter/frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push Backend
      uses: docker/build-push-action@v4
      with:
        context: ./backend
        push: true
        tags: ghcr.io/eiendomsmuligheter/backend:latest,ghcr.io/eiendomsmuligheter/backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Build and push AI Service
      uses: docker/build-push-action@v4
      with:
        context: ./ai_modules
        push: true
        tags: ghcr.io/eiendomsmuligheter/ai-service:latest,ghcr.io/eiendomsmuligheter/ai-service:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Scan Docker images for vulnerabilities
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'ghcr.io/eiendomsmuligheter/frontend:${{ github.sha }}'
        format: 'sarif'
        output: 'trivy-results.sarif'

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v3
    
    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set Kubernetes context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG }}
        
    - name: Update Kubernetes manifests
      run: |
        # Erstatt image-tags med SHA i deployment yaml
        sed -i "s|ghcr.io/eiendomsmuligheter/frontend:latest|ghcr.io/eiendomsmuligheter/frontend:${{ github.sha }}|g" infrastructure/kubernetes/frontend-deployment.yml
        sed -i "s|ghcr.io/eiendomsmuligheter/backend:latest|ghcr.io/eiendomsmuligheter/backend:${{ github.sha }}|g" infrastructure/kubernetes/backend-deployment.yml
        sed -i "s|ghcr.io/eiendomsmuligheter/ai-service:latest|ghcr.io/eiendomsmuligheter/ai-service:${{ github.sha }}|g" infrastructure/kubernetes/ai-service-deployment.yml
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f infrastructure/kubernetes/
        
    - name: Check deployment status
      run: |
        kubectl rollout status deployment/eiendomsmuligheter-frontend -n production
        kubectl rollout status deployment/eiendomsmuligheter-backend -n production
        kubectl rollout status deployment/eiendomsmuligheter-ai-service -n production
        
    - name: Run smoke tests
      run: |
        # Implementere enkle HTTP-tester mot API-endepunkter for Ã¥ verifisere at tjenesten fungerer
        curl -f https://api.eiendomsmuligheter.no/health || exit 1
