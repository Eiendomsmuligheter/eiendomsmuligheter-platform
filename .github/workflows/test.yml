name: Test Suite

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-secure.txt
        pip install pytest pytest-asyncio pytest-cov pytest-mock httpx pytest-xdist aioresponses

    - name: Set up environment variables
      run: |
        echo "AUTH0_DOMAIN=test-domain.auth0.com" >> $GITHUB_ENV
        echo "AUTH0_CLIENT_ID=test-client-id" >> $GITHUB_ENV
        echo "AUTH0_CLIENT_SECRET=test-client-secret" >> $GITHUB_ENV
        echo "AUTH0_AUDIENCE=test-audience" >> $GITHUB_ENV
        echo "STRIPE_SECRET_KEY=test-stripe-key" >> $GITHUB_ENV
        echo "STRIPE_PUBLISHABLE_KEY=test-stripe-pub-key" >> $GITHUB_ENV
        echo "STRIPE_WEBHOOK_SECRET=test-webhook-secret" >> $GITHUB_ENV
        echo "DATABASE_URL=postgresql://test_user:test_password@localhost:5432/test_db" >> $GITHUB_ENV

    - name: Run tests
      run: |
        pytest --cov=. --cov-report=xml -v -n auto

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

  security:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Security scan with Bandit
      run: |
        pip install bandit
        bandit -r . -c pyproject.toml

    - name: Run safety check
      run: |
        pip install safety
        safety check

    - name: Run dependency review
      uses: actions/dependency-review-action@v1

  lint:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.11

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy

    - name: Run linters
      run: |
        flake8 .
        black . --check
        isort . --check-only
        mypy .

  build:
    needs: [test, security, lint]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Build Docker image
      run: |
        docker build -t eiendomsmuligheter-platform:test .
        docker tag eiendomsmuligheter-platform:test eiendomsmuligheter-platform:latest