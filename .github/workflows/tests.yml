name: Test Suite

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        python-version: ["3.10"] # Redusert for å spare CI-minutter
        node-version: [18.x]     # Redusert for å spare CI-minutter
      fail-fast: true            # Avslutt tidlig hvis en test feiler

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 2           # For å kunne sjekke endrede filer

    # Identifiser endrede filer for selektiv testing
    - name: Get changed files
      id: changed-files
      uses: tj-actions/changed-files@v35
      with:
        files: |
          backend/**
          frontend/**
          ai_modules/**

    # Python setup
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'             # Aktiverer pip caching
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/requirements.txt
        pip install -r backend/requirements-dev.txt

    # Node.js setup
    - name: Set up Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install Node.js dependencies
      run: |
        cd frontend
        npm ci

    # Backend tests - kjører bare hvis backend-filer er endret
    - name: Run backend tests
      if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'backend/')
      run: |
        cd backend
        python -m pytest --junitxml=test-results/backend-tests.xml

    # Frontend tests - kjører bare hvis frontend-filer er endret
    - name: Run frontend tests
      if: steps.changed-files.outputs.any_changed == 'true' && contains(steps.changed-files.outputs.all_changed_files, 'frontend/')
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false --ci --testResultsProcessor="jest-junit"
      env:
        JEST_JUNIT_OUTPUT_DIR: "./test-results"
        JEST_JUNIT_OUTPUT_NAME: "frontend-tests.xml"

    # E2E tests - kjører alltid på main branch, ellers bare når relevant kode endres
    - name: Install Chrome
      if: github.ref == 'refs/heads/main' || contains(steps.changed-files.outputs.all_changed_files, 'tests/e2e/')
      run: |
        wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
        sudo apt install ./google-chrome-stable_current_amd64.deb

    - name: Run E2E tests
      if: github.ref == 'refs/heads/main' || contains(steps.changed-files.outputs.all_changed_files, 'tests/e2e/')
      run: |
        cd tests/e2e
        pytest -v --junitxml=test-results/e2e.xml

    # Upload test results
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results
        path: |
          **/test-results/
          frontend/coverage/

    # Publish test results to GitHub
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/test-results/**/*.xml

    # Coverage report
    - name: Generate coverage report
      if: github.ref == 'refs/heads/main'
      run: |
        cd backend
        coverage run -m pytest
        coverage xml
        cd ../frontend
        npm test -- --coverage --watchAll=false --coverageReporters=cobertura

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: github.ref == 'refs/heads/main'
      with:
        files: |
          backend/coverage.xml
          frontend/coverage/cobertura-coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        verbose: true

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    # Python linting
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pip'
    
    - name: Install Python linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
    
    - name: Run Python linting
      run: |
        black --check backend
        isort --check-only backend
        flake8 backend
        mypy backend

    # JavaScript/TypeScript linting
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Node.js linting tools
      run: |
        cd frontend
        npm ci
    
    - name: Run JavaScript/TypeScript linting
      run: |
        cd frontend
        npm run lint
        npm run type-check

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run OWASP Dependency Check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'Eiendomsmuligheter'
        path: '.'
        format: 'HTML'
        
    - name: Upload dependency check report
      uses: actions/upload-artifact@v3
      with:
        name: dependency-check-report
        path: reports

    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
