name: Deploy Eiendomsmuligheter

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '18.x'
        
    - name: Install Dependencies
      run: |
        cd frontend && npm install
        cd ../backend && npm install
        
    - name: Run Tests
      run: |
        cd frontend && npm test
        cd ../backend && npm test
        
    - name: Run Linting
      run: |
        cd frontend && npm run lint
        cd ../backend && npm run lint

  security_scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Run Security Scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy_staging:
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
        
    - name: Build and Push Docker Images
      run: |
        docker build -t eiendomsmuligheter-frontend:staging ./frontend
        docker build -t eiendomsmuligheter-backend:staging ./backend
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com
        docker tag eiendomsmuligheter-frontend:staging ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-frontend:staging
        docker tag eiendomsmuligheter-backend:staging ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-backend:staging
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-frontend:staging
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-backend:staging
        
    - name: Deploy to Staging
      run: |
        aws ecs update-service --cluster eiendomsmuligheter-staging --service frontend-service --force-new-deployment
        aws ecs update-service --cluster eiendomsmuligheter-staging --service backend-service --force-new-deployment

  deploy_production:
    runs-on: ubuntu-latest
    needs: [test, security_scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v2
    
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-north-1
        
    - name: Build and Push Docker Images
      run: |
        docker build -t eiendomsmuligheter-frontend:production ./frontend
        docker build -t eiendomsmuligheter-backend:production ./backend
        aws ecr get-login-password --region eu-north-1 | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com
        docker tag eiendomsmuligheter-frontend:production ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-frontend:production
        docker tag eiendomsmuligheter-backend:production ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-backend:production
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-frontend:production
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.eu-north-1.amazonaws.com/eiendomsmuligheter-backend:production
        
    - name: Deploy to Production
      run: |
        aws ecs update-service --cluster eiendomsmuligheter-production --service frontend-service --force-new-deployment
        aws ecs update-service --cluster eiendomsmuligheter-production --service backend-service --force-new-deployment
        
    - name: Invalidate CloudFront Cache
      run: |
        aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  notify:
    needs: [deploy_staging, deploy_production]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify Slack
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: always()